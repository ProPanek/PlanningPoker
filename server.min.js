!function(e){var o={};function r(t){if(o[t])return o[t].exports;var s=o[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=o,r.d=function(e,o,t){r.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,o){if(1&o&&(e=r(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var s in e)r.d(t,s,function(o){return e[o]}.bind(null,s));return t},r.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(o,"a",o),o},r.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},r.p="",r(r.s=11)}([function(e,o){e.exports=require("lodash/findIndex")},function(e,o){e.exports=require("pg")},function(e,o){e.exports=require("path")},function(e,o){e.exports=require("bcrypt")},function(e,o){e.exports=require("express")},function(e,o){e.exports=require("date-and-time")},function(e,o){e.exports=require("http")},function(e,o){e.exports=require("fs")},function(e,o){e.exports=require("socket.io")},function(e,o){e.exports=require("uuid/v4")},function(e,o){e.exports=require("jira-connector")},function(e,o,r){"use strict";r.r(o);var t=r(4),s=r.n(t),n=r(6),i=r.n(n),a=r(7),c=r.n(a),u=r(8),m=r.n(u),d=r(0),l=r.n(d),g=r(2),f=r.n(g),p=r(9),h=r.n(p),y=r(10),I=r.n(y),b=r(5),S=r.n(b),w=r(3),U=r.n(w),v=r(1);const j=process.env.PORT||5e3,k=s()(),R=i.a.createServer(k),_=m()(R,{cookie:!1});let A,N=[],x=new Map,E=new Map,T=new Map;!async function(){const e=new v.Client({connectionString:process.env.DATABASE_URL||"postgres://sebastianogarek:@localhost:5432/sebastianogarek"});e.connect(),await e.query("SELECT * FROM rooms",(o,r)=>{console.log(o,r),r.rows.map(({roomname:e,roomid:o,roompassword:r,timestamp:t})=>{const s={roomName:"",roomId:"",timestamp:"",user:[],game:[],gameHistory:[]};s.roomName=e,s.roomId=o,s.timestamp=t,T.set(o,r),E.set(o,s)}),e.end()})}(),_.on("connection",e=>{console.log("User -> connected to server id:",e.id),e.on("jiraLogin",({jiraLogin:o,jiraPassword:r,jiraSubdomain:t})=>{(A=new I.a({host:`${t}.atlassian.net`,basic_auth:{username:o,password:r}}))&&A.board.getAllBoards({startAt:0},function(o,r){e.emit("jiraLogin",r),console.log("Jira -> connecting and fetching boards",o),o&&e.emit("errors",{error:o})})}),e.on("jiraGetBoard",o=>{A.board.getIssuesForBacklog({boardId:o},function(o,r){let t=[];for(let e=0;e<r.issues.length;e++)t.push({id:r.issues[e].id,key:r.issues[e].key,summary:r.issues[e].fields.summary,description:r.issues[e].fields.description,comments:r.issues[e].fields.comment.comments,priorityType:r.issues[e].fields.priority.name,priorityUrl:r.issues[e].fields.priority.iconUrl,issueUrl:r.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBacklogBoard",t),console.log("Jira -> fetching singe board"),o&&e.emit("errors",{error:o})}),A.board.getIssuesForBoard({boardId:o},function(o,r){let t=[];for(let e=0;e<r.issues.length;e++)t.push({id:r.issues[e].id,key:r.issues[e].key,summary:r.issues[e].fields.summary,description:r.issues[e].fields.description,comments:r.issues[e].fields.comment.comments,priorityType:r.issues[e].fields.priority.name,priorityUrl:r.issues[e].fields.priority.iconUrl,issueUrl:r.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBoard",t),console.log("Jira -> fetching singe board"),o&&e.emit("errors",{error:o})})}),e.on("jiraSetEstimation",({issueId:o,boardId:r,estimationScore:t})=>{A.issue.setIssueEstimation({issueId:o,boardId:r,value:t},function(r){console.log(`Jira -> setting estimation for id: ${o} value: ${t}`),r&&e.emit("errors",{error:r})})}),e.on("createRoom",({userName:o,roomName:r,roomPassword:t})=>{const s={roomName:"",roomId:"",timestamp:"",user:[],game:[],gameHistory:[]},n=h()();let i=new Date;i=S.a.format(i,"YYYY/MM/DD HH:mm:ss"),s.user.push({userId:e.id,userName:o}),s.roomName=r,s.roomId=n,s.timestamp=i,U.a.hash(t,10,(o,t)=>{T.set(n,t),async function(e,o,r,t){const s=new v.Client({connectionString:process.env.DATABASE_URL||"postgres://sebastianogarek:@localhost:5432/sebastianogarek"});s.connect(),await s.query(`INSERT INTO rooms(roomName,roomPassword,roomId,timeStamp) VALUES('${e}', '${o}', '${r}', '${t}')`,(e,o)=>{console.log(e,o),s.end()})}(r,t,n,i),o&&e.emit("errors",{error:o})}),E.set(n,s),x.set(e.id,n),N.push(s),e.join(n),e.emit("createRoom",s),_.in(n).emit("waitingFor",s.game.length),console.log("User -> Created room! RoomId:",n)}),setInterval(()=>{e.emit("fetchRooms",N)},1e3),e.on("joinRoom",({roomId:o,roomPassword:r,userName:t})=>{if(E.has(o)){let s=E.get(o);console.log(s);const n=T.get(o);U.a.compare(r,n,function(r,n){if(n){let r=new Date;r=S.a.format(r,"YYYY/MM/DD HH:mm:ss"),s.timestamp=r,async function(e,o){const r=new v.Client({connectionString:process.env.DATABASE_URL||"postgres://sebastianogarek:@localhost:5432/sebastianogarek"});r.connect(),await r.query(`UPDATE rooms SET timestamp = '${o}' WHERE roomId = '${e}'`,(e,o)=>{console.log(e,o),r.end()})}(o,r),s.user.push({userId:e.id,userName:t}),x.set(e.id,o),e.join(o);let n=l()(s,function(e){return e.roomId===o});-1!==n&&N[n].user.push({userId:e.id,userName:t}),console.log("User -> Joined room! RoomId:",o),e.emit("joinRoom",s),E.set(o,s),_.in(o).emit("waitingFor",s.game.length),1===s.user.length&&_.in(o).emit("changeAdmin",s.user[0].userId),console.log(s)}else e.emit("errors",{error:"Invalid Password"})})}else e.emit("errors",{error:"Room not found"})}),e.on("deleteRoom",({roomId:o,roomPassword:r})=>{if(T.has(o)){const t=T.get(o);U.a.compare(r,t,function(r,t){if(t){let r=l()(N,function(e){return e.roomId===o});N.splice(r,1),E.delete(o),async function(e){const o=new v.Client({connectionString:process.env.DATABASE_URL||"postgres://sebastianogarek:@localhost:5432/sebastianogarek"});o.connect(),await o.query(`DELETE FROM rooms WHERE roomId = '${e}'`,(e,r)=>{console.log(e,r),o.end()})}(o),e.emit("deleteRoom"),console.log("User -> Deleted room! RoomId:",o)}else e.emit("errors",{error:"Invalid Password (delete)"})})}}),e.on("sendCard",({roomId:e,userName:o,cardValue:r})=>{if(E.has(e)){let t=E.get(e);t.game.push({userName:o,cardValue:r});let s=l()(t.user,function(e){return e.userName===o});t.user[s].userName=`${t.user[s].userName} - âœ”`,t.user.length===t.game.length?(_.in(e).emit("sendCard",t.game),_.in(e).emit("waitingFor",t.game.length)):_.in(e).emit("waitingFor",t.game.length),E.set(e,t)}}),e.on("resetCards",({roomId:e})=>{if(E.has(e)){let o=E.get(e);for(let e=0;e<o.user.length;e++){let r=o.user[e].userName.split(" - ");o.user[e].userName=r[0]}o.gameHistory.push(o.game),_.in(e).emit("resetCards",o.gameHistory),o.game=[],o.title="",o.description="",_.in(e).emit("waitingFor",o.game.length),E.set(e,o)}}),e.on("fetchUsers",({roomId:e})=>{if(E.has(e)){const o=E.get(e);_.in(e).emit("fetchUsers",o.user),1===o.user.length&&_.in(e.toString()).emit("changeAdmin",o.user[0].userId)}}),e.on("kickUser",({userId:o})=>{if(x.has(o)){let e=x.get(o),r=E.get(e.toString()),t=l()(r.user,function(e){return e.userId===o});-1!==t&&(_.in(e.toString()).emit("kickUser",r.user[t]),r.user.splice(t,1),_.in(e.toString()).emit("waitingFor",r.game.length),1===r.user.length&&_.in(e.toString()).emit("changeAdmin",r.user[0].userId),E.set(e.toString(),r),console.log("User -> kicked"))}else e.emit("errors",{error:"Cant find user you trying to kick"})}),e.on("changeAdmin",({userId:o})=>{if(x.has(o)){let e=x.get(o),r=E.get(e.toString()),t=l()(r.user,function(e){return e.userId===o});-1!==t&&(_.in(e.toString()).emit("changeAdmin",r.user[t].userId),console.log("User -> admin permissions given"))}else e.emit("errors",{error:"Cant find user you trying to give admin"})}),e.on("broadcastTitle",({roomId:o,title:r})=>{if(E.has(o)){let t=E.get(o);t.title!==r&&(t.title=r,e.broadcast.to(o).emit("broadcastTitle",r),E.set(o,t))}}),e.on("broadcastDescription",({roomId:o,description:r})=>{if(E.has(o)){let t=E.get(o);t.description!==r&&(t.description=r,e.broadcast.to(o).emit("broadcastDescription",r),E.set(o,t))}}),e.on("disconnect",()=>{if(x.has(e.id)){let o=x.get(e.id);if(E.has(o.toString())){let r=E.get(o.toString()),t=l()(r.user,function(o){return o.userId===e.id});-1!==t&&(r.user.splice(t,1),_.in(o.toString()).emit("waitingFor",r.game.length),1===r.user.length&&_.in(o.toString()).emit("changeAdmin",r.user[0].userId),E.set(o.toString(),r),console.log("User -> disconnected from room"))}}console.log("User -> disconnected from server")}),e.on("disconnecting",e=>{console.log("User -> disconnecting reason:",e)}),e.on("reconnecting",e=>{console.log("User -> lost connection in process of reconnection reason:",e)}),e.on("reconnect",()=>{console.log("User -> user reconnected")})}),k.use(s.a.static(f.a.join(__dirname,"client/build"))),k.get("/room/*/:uuid",function(e,o,r){const{uuid:t}=e.params;if(console.log("Room not found!: ",t),E.has(t))r();else{const e=c.a.readFileSync(f.a.join(__dirname,"client/build/index.html"),"utf-8").replace("</body>","\n      <script>\n        window.__ROOM_NOT_FOUND__ = true\n      <\/script>\n    </body>");o.status(404).send(e)}}),k.get("*",function(e,o){o.sendFile("index.html",{root:f.a.join(__dirname,"client/build")})}),R.listen(j,()=>console.log(`Listening on port ${j}`))}]);