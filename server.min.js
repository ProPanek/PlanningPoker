!function(e){var r={};function o(t){if(r[t])return r[t].exports;var s=r[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=r,o.d=function(e,r,t){o.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,r){if(1&r&&(e=o(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var s in e)o.d(t,s,function(r){return e[r]}.bind(null,s));return t},o.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(r,"a",r),r},o.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},o.p="",o(o.s=10)}([function(e,r){e.exports=require("lodash/findIndex")},function(e,r){e.exports=require("path")},function(e,r){e.exports=require("bcrypt")},function(e,r){e.exports=require("express")},function(e,r){e.exports=require("http")},function(e,r){e.exports=require("fs")},function(e,r){e.exports=require("socket.io")},function(e,r){e.exports=require("uuid/v4")},function(e,r){e.exports=require("jira-connector")},function(e,r){e.exports=require("date-and-time")},function(e,r,o){"use strict";o.r(r);var t=o(3),s=o.n(t),i=o(4),n=o.n(i),a=o(5),u=o.n(a),c=o(6),d=o.n(c),l=o(0),m=o.n(l),g=o(1),f=o.n(g),p=o(7),h=o.n(p),I=o(8),y=o.n(I),b=o(9),S=o.n(b),j=o(2),U=o.n(j);const w=process.env.PORT||5e3,v=s()(),_=n.a.createServer(v),x=d()(_,{cookie:!1});let N,k=[],P=new Map,R=new Map,F=new Map;x.on("connection",e=>{console.log("User -> connected to server id:",e.id),e.on("jiraLogin",({jiraLogin:r,jiraPassword:o,jiraSubdomain:t})=>{(N=new y.a({host:`${t}.atlassian.net`,basic_auth:{username:r,password:o}}))&&N.board.getAllBoards({startAt:0},function(r,o){e.emit("jiraLogin",o),console.log("Jira -> connecting and fetching boards",r),r&&e.emit("errors",{error:r})})}),e.on("jiraGetBoard",r=>{N.board.getIssuesForBacklog({boardId:r},function(r,o){let t=[];for(let e=0;e<o.issues.length;e++)t.push({id:o.issues[e].id,key:o.issues[e].key,summary:o.issues[e].fields.summary,description:o.issues[e].fields.description,comments:o.issues[e].fields.comment.comments,priorityType:o.issues[e].fields.priority.name,priorityUrl:o.issues[e].fields.priority.iconUrl,issueUrl:o.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBacklogBoard",t),console.log("Jira -> fetching singe board"),r&&e.emit("errors",{error:r})}),N.board.getIssuesForBoard({boardId:r},function(r,o){let t=[];for(let e=0;e<o.issues.length;e++)t.push({id:o.issues[e].id,key:o.issues[e].key,summary:o.issues[e].fields.summary,description:o.issues[e].fields.description,comments:o.issues[e].fields.comment.comments,priorityType:o.issues[e].fields.priority.name,priorityUrl:o.issues[e].fields.priority.iconUrl,issueUrl:o.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBoard",t),console.log("Jira -> fetching singe board"),r&&e.emit("errors",{error:r})})}),e.on("jiraSetEstimation",({issueId:r,boardId:o,estimationScore:t})=>{N.issue.setIssueEstimation({issueId:r,boardId:o,value:t},function(o){console.log(`Jira -> setting estimation for id: ${r} value: ${t}`),o&&e.emit("errors",{error:o})})}),e.on("createRoom",({userName:r,roomName:o,roomPassword:t})=>{const s={roomName:"",roomId:"",createTimestamp:"",user:[],game:[],gameHistory:[]},i=h()();let n=new Date;n=S.a.format(n,"YYYY/MM/DD HH:mm:ss"),s.user.push({userId:e.id,userName:r}),s.roomName=o,s.roomId=i,s.createTimestamp=n,U.a.hash(t,10,function(r,o){F.set(i,o),r&&e.emit("errors",{error:r})}),R.set(i,s),P.set(e.id,i),k.push(s),e.join(i),e.emit("createRoom",s),x.in(i).emit("waitingFor",s.game.length),console.log("User -> Created room! RoomId:",i)}),setInterval(()=>{e.emit("fetchRooms",k)},1e3),e.on("joinRoom",({roomId:r,roomPassword:o,userName:t})=>{if(R.has(r)){let s=R.get(r);const i=F.get(r);U.a.compare(o,i,function(o,i){if(i){s.user.push({userId:e.id,userName:t}),P.set(e.id,r),e.join(r);let o=m()(s,function(e){return e.roomId===r});-1!==o&&k[o].user.push({userId:e.id,userName:t}),console.log("User -> Joined room! RoomId:",r),e.emit("joinRoom",s),R.set(r,s),x.in(r).emit("waitingFor",s.game.length)}else e.emit("errors",{error:"Invalid Password"})})}else e.emit("errors",{error:"Room not found"})}),e.on("deleteRoom",({roomId:r,roomPassword:o})=>{if(F.has(r)){const t=F.get(r);U.a.compare(o,t,function(o,t){if(t){let e=m()(k,function(e){return e.roomId===r});k.splice(e,1),R.delete(r),console.log("User -> Deleted room! RoomId:",r)}else e.emit("errors",{error:"Invalid Password (delete)"})})}}),e.on("sendCard",({roomId:e,userName:r,cardValue:o})=>{if(R.has(e)){let t=R.get(e);t.game.push({userName:r,cardValue:o});let s=m()(t.user,function(e){return e.userName===r});t.user[s].userName=`${t.user[s].userName} - âœ”`,t.user.length===t.game.length?(x.in(e).emit("sendCard",t.game),x.in(e).emit("waitingFor",t.game.length)):x.in(e).emit("waitingFor",t.game.length),R.set(e,t)}}),e.on("resetCards",({roomId:e})=>{if(R.has(e)){let r=R.get(e);for(let e=0;e<r.user.length;e++){let o=r.user[e].userName.split(" - ");r.user[e].userName=o[0]}r.gameHistory.push(r.game),x.in(e).emit("resetCards",r.gameHistory),r.game=[],r.title="",r.description="",x.in(e).emit("waitingFor",r.game.length),R.set(e,r)}}),e.on("fetchUsers",({roomId:e})=>{setInterval(()=>{if(R.has(e)){const r=R.get(e);x.in(e).emit("fetchUsers",r.user),1===r.user.length&&x.in(e.toString()).emit("changeAdmin",r.user[0].userId)}},1e3)}),e.on("kickUser",({userId:e})=>{if(P.has(e)){let r=P.get(e),o=R.get(r.toString()),t=m()(o.user,function(r){return r.userId===e});-1!==t&&(x.in(r.toString()).emit("kickUser",o.user[t]),o.user.splice(t,1),x.in(r.toString()).emit("waitingFor",o.game.length),1===o.user.length&&x.in(r.toString()).emit("changeAdmin",o.user[0].userId),R.set(r.toString(),o),console.log("User -> kicked"))}}),e.on("changeAdmin",({userId:e})=>{if(P.has(e)){let r=P.get(e),o=R.get(r.toString()),t=m()(o.user,function(r){return r.userId===e});-1!==t&&(x.in(r.toString()).emit("changeAdmin",o.user[t].userId),console.log("User -> admin permissions given"))}}),e.on("broadcastTitle",({roomId:r,title:o})=>{if(R.has(r)){let t=R.get(r);t.title!==o&&(t.title=o,e.broadcast.to(r).emit("broadcastTitle",o),R.set(r,t))}}),e.on("broadcastDescription",({roomId:r,description:o})=>{if(R.has(r)){let t=R.get(r);t.description!==o&&(t.description=o,e.broadcast.to(r).emit("broadcastDescription",o),R.set(r,t))}}),e.on("disconnect",()=>{if(P.has(e.id)){let r=P.get(e.id);if(R.has(r.toString())){let o=R.get(r.toString()),t=m()(o.user,function(r){return r.userId===e.id});-1!==t&&(o.user.splice(t,1),x.in(r.toString()).emit("waitingFor",o.game.length),1===o.user.length&&x.in(r.toString()).emit("changeAdmin",o.user[0].userId),R.set(r.toString(),o),console.log("User -> disconnected from room"))}}console.log("User -> disconnected from server")}),e.on("disconnecting",e=>{console.log("User -> disconnecting reason:",e)}),e.on("reconnecting",e=>{console.log("User -> lost connection in process of reconnection reason:",e)}),e.on("reconnect",()=>{console.log("User -> user reconnected")})}),v.use(s.a.static(f.a.join(__dirname,"client/build"))),v.get("/room/*/:uuid",function(e,r,o){const{uuid:t}=e.params;if(console.log("Room not found!: ",t),R.has(t))o();else{const e=u.a.readFileSync(f.a.join(__dirname,"client/build/index.html"),"utf-8").replace("</body>","\n      <script>\n        window.__THIS_IS_404_PAGE__ = true\n      <\/script>\n    </body>");r.status(404).send(e)}}),v.get("*",function(e,r){r.sendFile("index.html",{root:f.a.join(__dirname,"client/build")})}),_.listen(w,()=>console.log(`Listening on port ${w}`))}]);