// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Room renders without errors 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Room
    store={
      Object {
        "fetchUsers": [Function],
        "jira": Object {
          "activeBoard": Object {
            "issues": Array [],
          },
          "activeBoardFetching": false,
        },
        "room": Object {
          "cardHistory": Array [],
          "cardResults": Array [],
          "cardsAreTheSame": false,
        },
        "user": Object {
          "admin": true,
          "users": Array [],
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <BrowserView
          style={
            Object {
              "display": "flex",
              "margin": "0 auto",
            }
          }
        >
          <inject-withRouter(JoinDialog)-with-store />
          <ForwardRef
            item={true}
            md={10}
          >
            <ForwardRef>
              <inject-withRouter(Issue)-with-store />
              <inject-withRouter(CardResults)-with-store />
              <inject-withRouter(Controls)-with-store />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            item={true}
            md={2}
          >
            <ForwardRef>
              <inject-withRouter(Lists)-with-store />
            </ForwardRef>
          </ForwardRef>
        </BrowserView>,
        <MobileView>
          <inject-withRouter(JoinDialog)-with-store />
          <ForwardRef
            item={true}
            md={12}
          >
            <ForwardRef>
              <inject-withRouter(Issue)-with-store />
              <inject-withRouter(CardResults)-with-store />
              <inject-withRouter(Controls)-with-store />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            item={true}
            md={12}
          >
            <ForwardRef>
              <inject-withRouter(Lists)-with-store />
            </ForwardRef>
          </ForwardRef>
        </MobileView>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <inject-withRouter(JoinDialog)-with-store />,
            <ForwardRef
              item={true}
              md={10}
            >
              <ForwardRef>
                <inject-withRouter(Issue)-with-store />
                <inject-withRouter(CardResults)-with-store />
                <inject-withRouter(Controls)-with-store />
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef
              item={true}
              md={2}
            >
              <ForwardRef>
                <inject-withRouter(Lists)-with-store />
              </ForwardRef>
            </ForwardRef>,
          ],
          "style": Object {
            "display": "flex",
            "margin": "0 auto",
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef>
                <inject-withRouter(Issue)-with-store />
                <inject-withRouter(CardResults)-with-store />
                <inject-withRouter(Controls)-with-store />
              </ForwardRef>,
              "item": true,
              "md": 10,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <inject-withRouter(Issue)-with-store />,
                  <inject-withRouter(CardResults)-with-store />,
                  <inject-withRouter(Controls)-with-store />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-chPdSV",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Card))",
                "options": Object {
                  "name": "MuiCard",
                },
                "render": [Function],
                "styledComponentId": "sc-chPdSV",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": [Function],
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-cSHVUG",
                "isStatic": true,
                "rules": Array [
                  "
  &&{
  height: calc(100vh - 48px);
  text-align:center;
  flex:1;
  }
",
                ],
              },
              "displayName": "Styled(WithStyles(Grid))",
              "options": Object {
                "name": "MuiGrid",
              },
              "render": [Function],
              "styledComponentId": "sc-cSHVUG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef>
                <inject-withRouter(Lists)-with-store />
              </ForwardRef>,
              "item": true,
              "md": 2,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <inject-withRouter(Lists)-with-store />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-chPdSV",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Card))",
                "options": Object {
                  "name": "MuiCard",
                },
                "render": [Function],
                "styledComponentId": "sc-chPdSV",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": [Function],
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-cSHVUG",
                "isStatic": true,
                "rules": Array [
                  "
  &&{
  height: calc(100vh - 48px);
  text-align:center;
  flex:1;
  }
",
                ],
              },
              "displayName": "Styled(WithStyles(Grid))",
              "options": Object {
                "name": "MuiGrid",
              },
              "render": [Function],
              "styledComponentId": "sc-cSHVUG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <inject-withRouter(JoinDialog)-with-store />,
            <ForwardRef
              item={true}
              md={12}
            >
              <ForwardRef>
                <inject-withRouter(Issue)-with-store />
                <inject-withRouter(CardResults)-with-store />
                <inject-withRouter(Controls)-with-store />
              </ForwardRef>
            </ForwardRef>,
            <ForwardRef
              item={true}
              md={12}
            >
              <ForwardRef>
                <inject-withRouter(Lists)-with-store />
              </ForwardRef>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef>
                <inject-withRouter(Issue)-with-store />
                <inject-withRouter(CardResults)-with-store />
                <inject-withRouter(Controls)-with-store />
              </ForwardRef>,
              "item": true,
              "md": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <inject-withRouter(Issue)-with-store />,
                  <inject-withRouter(CardResults)-with-store />,
                  <inject-withRouter(Controls)-with-store />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-chPdSV",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Card))",
                "options": Object {
                  "name": "MuiCard",
                },
                "render": [Function],
                "styledComponentId": "sc-chPdSV",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": [Function],
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-cSHVUG",
                "isStatic": true,
                "rules": Array [
                  "
  &&{
  height: calc(100vh - 48px);
  text-align:center;
  flex:1;
  }
",
                ],
              },
              "displayName": "Styled(WithStyles(Grid))",
              "options": Object {
                "name": "MuiGrid",
              },
              "render": [Function],
              "styledComponentId": "sc-cSHVUG",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef>
                <inject-withRouter(Lists)-with-store />
              </ForwardRef>,
              "item": true,
              "md": 12,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <inject-withRouter(Lists)-with-store />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-chPdSV",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Card))",
                "options": Object {
                  "name": "MuiCard",
                },
                "render": [Function],
                "styledComponentId": "sc-chPdSV",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Naked": [Function],
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-kAzzGY",
                "isStatic": true,
                "rules": Array [
                  "
  &&{
  text-align:center;
  flex:1;
  }
",
                ],
              },
              "displayName": "Styled(WithStyles(Grid))",
              "options": Object {
                "name": "MuiGrid",
              },
              "render": [Function],
              "styledComponentId": "sc-kAzzGY",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <BrowserView
            style={
              Object {
                "display": "flex",
                "margin": "0 auto",
              }
            }
          >
            <inject-withRouter(JoinDialog)-with-store />
            <ForwardRef
              item={true}
              md={10}
            >
              <ForwardRef>
                <inject-withRouter(Issue)-with-store />
                <inject-withRouter(CardResults)-with-store />
                <inject-withRouter(Controls)-with-store />
              </ForwardRef>
            </ForwardRef>
            <ForwardRef
              item={true}
              md={2}
            >
              <ForwardRef>
                <inject-withRouter(Lists)-with-store />
              </ForwardRef>
            </ForwardRef>
          </BrowserView>,
          <MobileView>
            <inject-withRouter(JoinDialog)-with-store />
            <ForwardRef
              item={true}
              md={12}
            >
              <ForwardRef>
                <inject-withRouter(Issue)-with-store />
                <inject-withRouter(CardResults)-with-store />
                <inject-withRouter(Controls)-with-store />
              </ForwardRef>
            </ForwardRef>
            <ForwardRef
              item={true}
              md={12}
            >
              <ForwardRef>
                <inject-withRouter(Lists)-with-store />
              </ForwardRef>
            </ForwardRef>
          </MobileView>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <inject-withRouter(JoinDialog)-with-store />,
              <ForwardRef
                item={true}
                md={10}
              >
                <ForwardRef>
                  <inject-withRouter(Issue)-with-store />
                  <inject-withRouter(CardResults)-with-store />
                  <inject-withRouter(Controls)-with-store />
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef
                item={true}
                md={2}
              >
                <ForwardRef>
                  <inject-withRouter(Lists)-with-store />
                </ForwardRef>
              </ForwardRef>,
            ],
            "style": Object {
              "display": "flex",
              "margin": "0 auto",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef>
                  <inject-withRouter(Issue)-with-store />
                  <inject-withRouter(CardResults)-with-store />
                  <inject-withRouter(Controls)-with-store />
                </ForwardRef>,
                "item": true,
                "md": 10,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <inject-withRouter(Issue)-with-store />,
                    <inject-withRouter(CardResults)-with-store />,
                    <inject-withRouter(Controls)-with-store />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Naked": [Function],
                  "attrs": undefined,
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-chPdSV",
                    "isStatic": true,
                    "rules": Array [
                      "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                    ],
                  },
                  "displayName": "Styled(WithStyles(Card))",
                  "options": Object {
                    "name": "MuiCard",
                  },
                  "render": [Function],
                  "styledComponentId": "sc-chPdSV",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-cSHVUG",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  text-align:center;
  flex:1;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Grid))",
                "options": Object {
                  "name": "MuiGrid",
                },
                "render": [Function],
                "styledComponentId": "sc-cSHVUG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef>
                  <inject-withRouter(Lists)-with-store />
                </ForwardRef>,
                "item": true,
                "md": 2,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <inject-withRouter(Lists)-with-store />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Naked": [Function],
                  "attrs": undefined,
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-chPdSV",
                    "isStatic": true,
                    "rules": Array [
                      "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                    ],
                  },
                  "displayName": "Styled(WithStyles(Card))",
                  "options": Object {
                    "name": "MuiCard",
                  },
                  "render": [Function],
                  "styledComponentId": "sc-chPdSV",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-cSHVUG",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  text-align:center;
  flex:1;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Grid))",
                "options": Object {
                  "name": "MuiGrid",
                },
                "render": [Function],
                "styledComponentId": "sc-cSHVUG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <inject-withRouter(JoinDialog)-with-store />,
              <ForwardRef
                item={true}
                md={12}
              >
                <ForwardRef>
                  <inject-withRouter(Issue)-with-store />
                  <inject-withRouter(CardResults)-with-store />
                  <inject-withRouter(Controls)-with-store />
                </ForwardRef>
              </ForwardRef>,
              <ForwardRef
                item={true}
                md={12}
              >
                <ForwardRef>
                  <inject-withRouter(Lists)-with-store />
                </ForwardRef>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef>
                  <inject-withRouter(Issue)-with-store />
                  <inject-withRouter(CardResults)-with-store />
                  <inject-withRouter(Controls)-with-store />
                </ForwardRef>,
                "item": true,
                "md": 12,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <inject-withRouter(Issue)-with-store />,
                    <inject-withRouter(CardResults)-with-store />,
                    <inject-withRouter(Controls)-with-store />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Naked": [Function],
                  "attrs": undefined,
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-chPdSV",
                    "isStatic": true,
                    "rules": Array [
                      "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                    ],
                  },
                  "displayName": "Styled(WithStyles(Card))",
                  "options": Object {
                    "name": "MuiCard",
                  },
                  "render": [Function],
                  "styledComponentId": "sc-chPdSV",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-cSHVUG",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  height: calc(100vh - 48px);
  text-align:center;
  flex:1;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Grid))",
                "options": Object {
                  "name": "MuiGrid",
                },
                "render": [Function],
                "styledComponentId": "sc-cSHVUG",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <ForwardRef>
                  <inject-withRouter(Lists)-with-store />
                </ForwardRef>,
                "item": true,
                "md": 12,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <inject-withRouter(Lists)-with-store />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Naked": [Function],
                  "attrs": undefined,
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-chPdSV",
                    "isStatic": true,
                    "rules": Array [
                      "
  &&{
  height: calc(100vh - 48px);
  overflow-y: auto;
  text-align:center;
  }
",
                    ],
                  },
                  "displayName": "Styled(WithStyles(Card))",
                  "options": Object {
                    "name": "MuiCard",
                  },
                  "render": [Function],
                  "styledComponentId": "sc-chPdSV",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "Naked": [Function],
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-kAzzGY",
                  "isStatic": true,
                  "rules": Array [
                    "
  &&{
  text-align:center;
  flex:1;
  }
",
                  ],
                },
                "displayName": "Styled(WithStyles(Grid))",
                "options": Object {
                  "name": "MuiGrid",
                },
                "render": [Function],
                "styledComponentId": "sc-kAzzGY",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
