// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateRoom renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CreateRoom
    store={
      Object {
        "jira": Object {
          "jiraBoards": Object {
            "values": Array [],
          },
          "jiraBoardsFetching": false,
        },
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <ForwardRef>
        <ForwardRef>
          <WithStyles(Typography)
            align="center"
            variant="h3"
          >
            Create Room
          </WithStyles(Typography)>
          <TextField
            id="user-name"
            label="User Name"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
            variant="standard"
          />
          <TextField
            id="room-name"
            label="Room Name"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
            variant="standard"
          />
          <TextField
            id="room-password"
            label="Room Password"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            type="password"
            value=""
            variant="standard"
          />
          <WithStyles(Grid)
            container={true}
            style={
              Object {
                "marginTop": "40px",
              }
            }
          >
            <WithStyles(Grid)
              item={true}
              xs={5}
            >
              <ForwardRef
                color="primary"
                onClick={[Function]}
                variant="contained"
              >
                Create Room
                <pure(AddCircleIcon)
                  style={
                    Object {
                      "marginLeft": "10px",
                    }
                  }
                />
              </ForwardRef>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              xs={2}
            >
              <ForwardRef
                variant="h5"
              >
                 OR 
              </ForwardRef>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              xs={5}
            >
              <ForwardRef
                onClick={[Function]}
                variant="contained"
              >
                Join room
                <Icon
                  style={
                    Object {
                      "marginLeft": "10px",
                    }
                  }
                />
              </ForwardRef>
            </WithStyles(Grid)>
          </WithStyles(Grid)>
        </ForwardRef>
      </ForwardRef>,
      "item": true,
      "xs": 12,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef>
          <WithStyles(Typography)
            align="center"
            variant="h3"
          >
            Create Room
          </WithStyles(Typography)>
          <TextField
            id="user-name"
            label="User Name"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
            variant="standard"
          />
          <TextField
            id="room-name"
            label="Room Name"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
            variant="standard"
          />
          <TextField
            id="room-password"
            label="Room Password"
            margin="normal"
            onChange={[Function]}
            required={false}
            select={false}
            type="password"
            value=""
            variant="standard"
          />
          <WithStyles(Grid)
            container={true}
            style={
              Object {
                "marginTop": "40px",
              }
            }
          >
            <WithStyles(Grid)
              item={true}
              xs={5}
            >
              <ForwardRef
                color="primary"
                onClick={[Function]}
                variant="contained"
              >
                Create Room
                <pure(AddCircleIcon)
                  style={
                    Object {
                      "marginLeft": "10px",
                    }
                  }
                />
              </ForwardRef>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              xs={2}
            >
              <ForwardRef
                variant="h5"
              >
                 OR 
              </ForwardRef>
            </WithStyles(Grid)>
            <WithStyles(Grid)
              item={true}
              xs={5}
            >
              <ForwardRef
                onClick={[Function]}
                variant="contained"
              >
                Join room
                <Icon
                  style={
                    Object {
                      "marginLeft": "10px",
                    }
                  }
                />
              </ForwardRef>
            </WithStyles(Grid)>
          </WithStyles(Grid)>
        </ForwardRef>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <WithStyles(Typography)
              align="center"
              variant="h3"
            >
              Create Room
            </WithStyles(Typography)>,
            <TextField
              id="user-name"
              label="User Name"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />,
            <TextField
              id="room-name"
              label="Room Name"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />,
            <TextField
              id="room-password"
              label="Room Password"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              type="password"
              value=""
              variant="standard"
            />,
            <WithStyles(Grid)
              container={true}
              style={
                Object {
                  "marginTop": "40px",
                }
              }
            >
              <WithStyles(Grid)
                item={true}
                xs={5}
              >
                <ForwardRef
                  color="primary"
                  onClick={[Function]}
                  variant="contained"
                >
                  Create Room
                  <pure(AddCircleIcon)
                    style={
                      Object {
                        "marginLeft": "10px",
                      }
                    }
                  />
                </ForwardRef>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                xs={2}
              >
                <ForwardRef
                  variant="h5"
                >
                   OR 
                </ForwardRef>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                xs={5}
              >
                <ForwardRef
                  onClick={[Function]}
                  variant="contained"
                >
                  Join room
                  <Icon
                    style={
                      Object {
                        "marginLeft": "10px",
                      }
                    }
                  />
                </ForwardRef>
              </WithStyles(Grid)>
            </WithStyles(Grid)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "align": "center",
              "children": "Create Room",
              "variant": "h3",
            },
            "ref": null,
            "rendered": "Create Room",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "user-name",
              "label": "User Name",
              "margin": "normal",
              "onChange": [Function],
              "required": false,
              "select": false,
              "value": "",
              "variant": "standard",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "room-name",
              "label": "Room Name",
              "margin": "normal",
              "onChange": [Function],
              "required": false,
              "select": false,
              "value": "",
              "variant": "standard",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "room-password",
              "label": "Room Password",
              "margin": "normal",
              "onChange": [Function],
              "required": false,
              "select": false,
              "type": "password",
              "value": "",
              "variant": "standard",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Grid)
                  item={true}
                  xs={5}
                >
                  <ForwardRef
                    color="primary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    Create Room
                    <pure(AddCircleIcon)
                      style={
                        Object {
                          "marginLeft": "10px",
                        }
                      }
                    />
                  </ForwardRef>
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                  xs={2}
                >
                  <ForwardRef
                    variant="h5"
                  >
                     OR 
                  </ForwardRef>
                </WithStyles(Grid)>,
                <WithStyles(Grid)
                  item={true}
                  xs={5}
                >
                  <ForwardRef
                    onClick={[Function]}
                    variant="contained"
                  >
                    Join room
                    <Icon
                      style={
                        Object {
                          "marginLeft": "10px",
                        }
                      }
                    />
                  </ForwardRef>
                </WithStyles(Grid)>,
              ],
              "container": true,
              "style": Object {
                "marginTop": "40px",
              },
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <ForwardRef
                    color="primary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    Create Room
                    <pure(AddCircleIcon)
                      style={
                        Object {
                          "marginLeft": "10px",
                        }
                      }
                    />
                  </ForwardRef>,
                  "item": true,
                  "xs": 5,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Create Room",
                      <pure(AddCircleIcon)
                        style={
                          Object {
                            "marginLeft": "10px",
                          }
                        }
                      />,
                    ],
                    "color": "primary",
                    "onClick": [Function],
                    "variant": "contained",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Create Room",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "style": Object {
                          "marginLeft": "10px",
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Naked": [Function],
                    "attrs": undefined,
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": true,
                      "rules": Array [
                        "
  &&{
  width:100%;
  }
",
                      ],
                    },
                    "displayName": "Styled(WithStyles(Button))",
                    "options": Object {
                      "name": "MuiButton",
                    },
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <ForwardRef
                    variant="h5"
                  >
                     OR 
                  </ForwardRef>,
                  "item": true,
                  "xs": 2,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": " OR ",
                    "variant": "h5",
                  },
                  "ref": null,
                  "rendered": " OR ",
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Naked": [Function],
                    "attrs": undefined,
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bZQynM",
                      "isStatic": true,
                      "rules": Array [
                        "
  &&{
  text-align:center;
  position:relative;
  top:20%;
  }
",
                      ],
                    },
                    "displayName": "Styled(WithStyles(Typography))",
                    "options": Object {
                      "name": "MuiTypography",
                      "withTheme": true,
                    },
                    "render": [Function],
                    "styledComponentId": "sc-bZQynM",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <ForwardRef
                    onClick={[Function]}
                    variant="contained"
                  >
                    Join room
                    <Icon
                      style={
                        Object {
                          "marginLeft": "10px",
                        }
                      }
                    />
                  </ForwardRef>,
                  "item": true,
                  "xs": 5,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Join room",
                      <Icon
                        style={
                          Object {
                            "marginLeft": "10px",
                          }
                        }
                      />,
                    ],
                    "onClick": [Function],
                    "variant": "contained",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Join room",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "style": Object {
                          "marginLeft": "10px",
                        },
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Naked": [Function],
                    "attrs": undefined,
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": true,
                      "rules": Array [
                        "
  &&{
  width:100%;
  }
",
                      ],
                    },
                    "displayName": "Styled(WithStyles(Button))",
                    "options": Object {
                      "name": "MuiButton",
                    },
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "rules": Array [
              "
  display: flex;
  flex-direction: column;
  width: 50%;
  margin: 0 auto;
  position: relative;
  top: calc(50vh - 240px);
",
            ],
          },
          "displayName": "styled.div",
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "Naked": [Function],
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": true,
          "rules": Array [
            "
  &&{
  height: calc(100vh - 64px);
  }
",
          ],
        },
        "displayName": "Styled(WithStyles(Card))",
        "options": Object {
          "name": "MuiCard",
        },
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "Naked": [Function],
      "attrs": undefined,
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
  &&{
  height: calc(100vh - 48px);
  }
",
        ],
      },
      "displayName": "Styled(WithStyles(Grid))",
      "options": Object {
        "name": "MuiGrid",
      },
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
      Symbol(Symbol.hasInstance): [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef>
          <ForwardRef>
            <WithStyles(Typography)
              align="center"
              variant="h3"
            >
              Create Room
            </WithStyles(Typography)>
            <TextField
              id="user-name"
              label="User Name"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />
            <TextField
              id="room-name"
              label="Room Name"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />
            <TextField
              id="room-password"
              label="Room Password"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              type="password"
              value=""
              variant="standard"
            />
            <WithStyles(Grid)
              container={true}
              style={
                Object {
                  "marginTop": "40px",
                }
              }
            >
              <WithStyles(Grid)
                item={true}
                xs={5}
              >
                <ForwardRef
                  color="primary"
                  onClick={[Function]}
                  variant="contained"
                >
                  Create Room
                  <pure(AddCircleIcon)
                    style={
                      Object {
                        "marginLeft": "10px",
                      }
                    }
                  />
                </ForwardRef>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                xs={2}
              >
                <ForwardRef
                  variant="h5"
                >
                   OR 
                </ForwardRef>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                xs={5}
              >
                <ForwardRef
                  onClick={[Function]}
                  variant="contained"
                >
                  Join room
                  <Icon
                    style={
                      Object {
                        "marginLeft": "10px",
                      }
                    }
                  />
                </ForwardRef>
              </WithStyles(Grid)>
            </WithStyles(Grid)>
          </ForwardRef>
        </ForwardRef>,
        "item": true,
        "xs": 12,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <ForwardRef>
            <WithStyles(Typography)
              align="center"
              variant="h3"
            >
              Create Room
            </WithStyles(Typography)>
            <TextField
              id="user-name"
              label="User Name"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />
            <TextField
              id="room-name"
              label="Room Name"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />
            <TextField
              id="room-password"
              label="Room Password"
              margin="normal"
              onChange={[Function]}
              required={false}
              select={false}
              type="password"
              value=""
              variant="standard"
            />
            <WithStyles(Grid)
              container={true}
              style={
                Object {
                  "marginTop": "40px",
                }
              }
            >
              <WithStyles(Grid)
                item={true}
                xs={5}
              >
                <ForwardRef
                  color="primary"
                  onClick={[Function]}
                  variant="contained"
                >
                  Create Room
                  <pure(AddCircleIcon)
                    style={
                      Object {
                        "marginLeft": "10px",
                      }
                    }
                  />
                </ForwardRef>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                xs={2}
              >
                <ForwardRef
                  variant="h5"
                >
                   OR 
                </ForwardRef>
              </WithStyles(Grid)>
              <WithStyles(Grid)
                item={true}
                xs={5}
              >
                <ForwardRef
                  onClick={[Function]}
                  variant="contained"
                >
                  Join room
                  <Icon
                    style={
                      Object {
                        "marginLeft": "10px",
                      }
                    }
                  />
                </ForwardRef>
              </WithStyles(Grid)>
            </WithStyles(Grid)>
          </ForwardRef>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                align="center"
                variant="h3"
              >
                Create Room
              </WithStyles(Typography)>,
              <TextField
                id="user-name"
                label="User Name"
                margin="normal"
                onChange={[Function]}
                required={false}
                select={false}
                value=""
                variant="standard"
              />,
              <TextField
                id="room-name"
                label="Room Name"
                margin="normal"
                onChange={[Function]}
                required={false}
                select={false}
                value=""
                variant="standard"
              />,
              <TextField
                id="room-password"
                label="Room Password"
                margin="normal"
                onChange={[Function]}
                required={false}
                select={false}
                type="password"
                value=""
                variant="standard"
              />,
              <WithStyles(Grid)
                container={true}
                style={
                  Object {
                    "marginTop": "40px",
                  }
                }
              >
                <WithStyles(Grid)
                  item={true}
                  xs={5}
                >
                  <ForwardRef
                    color="primary"
                    onClick={[Function]}
                    variant="contained"
                  >
                    Create Room
                    <pure(AddCircleIcon)
                      style={
                        Object {
                          "marginLeft": "10px",
                        }
                      }
                    />
                  </ForwardRef>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  xs={2}
                >
                  <ForwardRef
                    variant="h5"
                  >
                     OR 
                  </ForwardRef>
                </WithStyles(Grid)>
                <WithStyles(Grid)
                  item={true}
                  xs={5}
                >
                  <ForwardRef
                    onClick={[Function]}
                    variant="contained"
                  >
                    Join room
                    <Icon
                      style={
                        Object {
                          "marginLeft": "10px",
                        }
                      }
                    />
                  </ForwardRef>
                </WithStyles(Grid)>
              </WithStyles(Grid)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "align": "center",
                "children": "Create Room",
                "variant": "h3",
              },
              "ref": null,
              "rendered": "Create Room",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "user-name",
                "label": "User Name",
                "margin": "normal",
                "onChange": [Function],
                "required": false,
                "select": false,
                "value": "",
                "variant": "standard",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "room-name",
                "label": "Room Name",
                "margin": "normal",
                "onChange": [Function],
                "required": false,
                "select": false,
                "value": "",
                "variant": "standard",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "room-password",
                "label": "Room Password",
                "margin": "normal",
                "onChange": [Function],
                "required": false,
                "select": false,
                "type": "password",
                "value": "",
                "variant": "standard",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <WithStyles(Grid)
                    item={true}
                    xs={5}
                  >
                    <ForwardRef
                      color="primary"
                      onClick={[Function]}
                      variant="contained"
                    >
                      Create Room
                      <pure(AddCircleIcon)
                        style={
                          Object {
                            "marginLeft": "10px",
                          }
                        }
                      />
                    </ForwardRef>
                  </WithStyles(Grid)>,
                  <WithStyles(Grid)
                    item={true}
                    xs={2}
                  >
                    <ForwardRef
                      variant="h5"
                    >
                       OR 
                    </ForwardRef>
                  </WithStyles(Grid)>,
                  <WithStyles(Grid)
                    item={true}
                    xs={5}
                  >
                    <ForwardRef
                      onClick={[Function]}
                      variant="contained"
                    >
                      Join room
                      <Icon
                        style={
                          Object {
                            "marginLeft": "10px",
                          }
                        }
                      />
                    </ForwardRef>
                  </WithStyles(Grid)>,
                ],
                "container": true,
                "style": Object {
                  "marginTop": "40px",
                },
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <ForwardRef
                      color="primary"
                      onClick={[Function]}
                      variant="contained"
                    >
                      Create Room
                      <pure(AddCircleIcon)
                        style={
                          Object {
                            "marginLeft": "10px",
                          }
                        }
                      />
                    </ForwardRef>,
                    "item": true,
                    "xs": 5,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        "Create Room",
                        <pure(AddCircleIcon)
                          style={
                            Object {
                              "marginLeft": "10px",
                            }
                          }
                        />,
                      ],
                      "color": "primary",
                      "onClick": [Function],
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Create Room",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "style": Object {
                            "marginLeft": "10px",
                          },
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Naked": [Function],
                      "attrs": undefined,
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bxivhb",
                        "isStatic": true,
                        "rules": Array [
                          "
  &&{
  width:100%;
  }
",
                        ],
                      },
                      "displayName": "Styled(WithStyles(Button))",
                      "options": Object {
                        "name": "MuiButton",
                      },
                      "render": [Function],
                      "styledComponentId": "sc-bxivhb",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    },
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <ForwardRef
                      variant="h5"
                    >
                       OR 
                    </ForwardRef>,
                    "item": true,
                    "xs": 2,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": " OR ",
                      "variant": "h5",
                    },
                    "ref": null,
                    "rendered": " OR ",
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Naked": [Function],
                      "attrs": undefined,
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": true,
                        "rules": Array [
                          "
  &&{
  text-align:center;
  position:relative;
  top:20%;
  }
",
                        ],
                      },
                      "displayName": "Styled(WithStyles(Typography))",
                      "options": Object {
                        "name": "MuiTypography",
                        "withTheme": true,
                      },
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    },
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <ForwardRef
                      onClick={[Function]}
                      variant="contained"
                    >
                      Join room
                      <Icon
                        style={
                          Object {
                            "marginLeft": "10px",
                          }
                        }
                      />
                    </ForwardRef>,
                    "item": true,
                    "xs": 5,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        "Join room",
                        <Icon
                          style={
                            Object {
                              "marginLeft": "10px",
                            }
                          }
                        />,
                      ],
                      "onClick": [Function],
                      "variant": "contained",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Join room",
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "function",
                        "props": Object {
                          "style": Object {
                            "marginLeft": "10px",
                          },
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Naked": [Function],
                      "attrs": undefined,
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bxivhb",
                        "isStatic": true,
                        "rules": Array [
                          "
  &&{
  width:100%;
  }
",
                        ],
                      },
                      "displayName": "Styled(WithStyles(Button))",
                      "options": Object {
                        "name": "MuiButton",
                      },
                      "render": [Function],
                      "styledComponentId": "sc-bxivhb",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                      Symbol(Symbol.hasInstance): [Function],
                    },
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": undefined,
            "componentStyle": ComponentStyle {
              "componentId": "sc-htpNat",
              "isStatic": true,
              "rules": Array [
                "
  display: flex;
  flex-direction: column;
  width: 50%;
  margin: 0 auto;
  position: relative;
  top: calc(50vh - 240px);
",
              ],
            },
            "displayName": "styled.div",
            "render": [Function],
            "styledComponentId": "sc-htpNat",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "Naked": [Function],
          "attrs": undefined,
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "rules": Array [
              "
  &&{
  height: calc(100vh - 64px);
  }
",
            ],
          },
          "displayName": "Styled(WithStyles(Card))",
          "options": Object {
            "name": "MuiCard",
          },
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "Naked": [Function],
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": true,
          "rules": Array [
            "
  &&{
  height: calc(100vh - 48px);
  }
",
          ],
        },
        "displayName": "Styled(WithStyles(Grid))",
        "options": Object {
          "name": "MuiGrid",
        },
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
        Symbol(Symbol.hasInstance): [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
