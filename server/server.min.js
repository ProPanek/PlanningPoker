!function(e){var o={};function n(t){if(o[t])return o[t].exports;var s=o[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var s in e)n.d(t,s,function(o){return e[o]}.bind(null,s));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=18)}([function(e,o){e.exports=require("pg/lib")},function(e,o){e.exports=require("passport")},function(e,o){e.exports=require("lodash/findIndex")},function(e,o){e.exports=require("dotenv")},function(e,o){e.exports=require("path")},function(e,o){e.exports=require("bcrypt")},function(e,o){e.exports=require("express")},function(e,o){e.exports=require("date-and-time")},function(e,o){e.exports=require("passport-google-oauth20")},function(e,o){e.exports=require("cors")},function(e,o){e.exports=require("http")},function(e,o){e.exports=require("fs")},function(e,o){e.exports=require("socket.io")},function(e,o){e.exports=require("cookie-session")},function(e,o){e.exports=require("uuid/v4")},function(e,o){e.exports=require("jira-connector")},function(e,o){e.exports=require("pg")},function(e,o){e.exports=require("rollbar")},function(e,o,n){"use strict";n.r(o);var t=n(1),s=n.n(t),r=n(8),i=n.n(r),a=n(0);async function c(e){const o=new a.Client({connectionString:process.env.DATABASE_URL});await o.connect();try{const n=await o.query(`SELECT * FROM users WHERE user_id = '${e}'`);return console.log("DB -> user found in DB"),await o.end(),n}catch(e){console.log(e)}}n(3).config(),n(3).config(),s.a.serializeUser((e,o)=>{o(null,e.user_id)}),s.a.deserializeUser((e,o)=>{c(e).then(e=>{o(null,e)})}),s.a.use(new i.a({callbackURL:"/login/google/redirect",clientID:process.env.CLIENT_ID,clientSecret:process.env.CLIENT_SECRET},(e,o,n,t)=>{c(n.id).then(e=>{e.rowCount?t(null,e.rows[0]):async function(e,o,n){const t=new a.Client({connectionString:process.env.DATABASE_URL});await t.connect();try{await t.query(`INSERT INTO users(user_id,user_name,user_email) VALUES('${e}', '${o}', '${n}')`),console.log("DB -> save user in DB"),await t.end()}catch(e){console.log(e)}}(n.id,n.displayName,n.emails[0].value).then(e=>{t(null,{user_id:n.id,user_name:n.displayName,user_email:n.emails[0].value})}).catch(e=>{console.log(e)})}).catch(e=>{console.log(e)})}));var u=n(9),l=n.n(u),d=n(6),m=n.n(d),g=n(10),f=n.n(g),p=n(11),h=n.n(p),y=n(12),_=n.n(y),w=n(2),I=n.n(w),E=n(4),R=n.n(E),S=n(7),A=n.n(S),U=n(5),T=n.n(U),b=n(13),v=n.n(b);n(3).config();const{Client:D}=n(16);n(17);async function B(e){const o=new a.Client({connectionString:process.env.DATABASE_URL});await o.connect();try{const n=await o.query(`SELECT * FROM rooms WHERE user_id = '${e}'`);return console.log("DB -> fetch user rooms room"),await o.end(),n}catch(e){console.log(e)}}async function j(e){const o=new a.Client({connectionString:process.env.DATABASE_URL});try{await o.connect(),await o.query(`DELETE FROM rooms WHERE room_id = '${e}'`),console.log("DB -> delete room"),await o.end()}catch(e){console.log(e)}}n(3).config();var k=n(14),L=n.n(k);function C(e,o,n,t,s,r,i,a){return{roomName:e||"",roomId:o||"",userId:n||"guest",timestamp:t||"",boardId:s||"",user:r||[],game:i||[],gameHistory:a||[]}}var q=n(15),N=n.n(q);let $;n(3).config();const x=process.env.PORT||3001,O=m()();O.use(l()()),O.use(v()({maxAge:6048e5,keys:[process.env.COOKIE_KEY]})),O.use(s.a.initialize()),O.use(s.a.session());const M=f.a.createServer(O),P=_()(M,{cookie:!1});let F=[],H=new Map,Y=new Map,W=new Map;!async function(){try{await async function(){try{const e=await new D({connectionString:process.env.DATABASE_URL});await e.connect(),await e.query('CREATE TABLE IF NOT EXISTS rooms(id SERIAL PRIMARY KEY, room_name "char" not null, room_id "char" not null, room_password "char" not null, room_tags json[], room_history json, room_board_id json, user_id "char" not null, room_timestamp TIMESTAMP not null)'),await e.query('CREATE TABLE IF NOT EXISTS users(id SERIAL PRIMARY KEY, user_id "char" not null, user_name "char" not null, user_email "char" not null, jira_subdomain "char"[] not null, jira_email "char" not null, user_name "char" not null) '),await e.query("INSERT INTO users(user_id,user_name,user_email) \n    SELECT 'guest', 'guest', 'guest'\n    WHERE NOT EXISTS (\n        SELECT 1 FROM users WHERE user_id='guest'\n    )"),e.end()}catch(e){console.log(e)}}(),console.log("DB -> init DB");const{rows:e}=await async function(){const e=new a.Client({connectionString:process.env.DATABASE_URL});await e.connect();try{const o=await e.query("SELECT * FROM rooms");return e.end(),o}catch(e){console.log(e)}}();e.map(({room_name:e,room_id:o,user_id:n,room_password:t,room_timestamp:s,room_history:r,room_board_id:i})=>{const a=C(e,o,n,s,i,!1,!1,r);W.set(o,t),Y.set(o,a)}),console.log(e),console.log("DB -> fetching rooms from DB")}catch(e){console.log(e)}}(),P.on("connection",e=>{console.log("User -> connected to server id:",e.id),e.on("jiraLogin",o=>{console.log(o),async function(e,o,n,t){const s=new a.Client({connectionString:process.env.DATABASE_URL});await s.connect();try{await s.query(`UPDATE users SET jira_email = '${e}', jira_api_key = '${o}', jira_subdomain = '${[n]}'  WHERE user_id = '${t}'`),console.log("DB -> save jira credentials in DB"),await s.end()}catch(e){console.log(e)}}(o.jiraLogin,o.jiraPassword,o.jiraSubdomain,o.userId),async function({jiraLogin:e,jiraPassword:o,jiraSubdomain:n}){if($=new N.a({host:`${n}.atlassian.net`,basic_auth:{username:e,password:o}}))return await $.board.getAllBoards({startAt:0})}(o).then(o=>{e.emit("jiraLogin",o)}).catch(o=>{e.emit("errors",{error:o})})}),e.on("jiraGetBoard",async o=>{console.log(o);try{const n=await async function(e){if($)return await $.board.getIssuesForBacklog({boardId:e})}(o);if(console.log(n),n.issues.length>0){let t=[];for(let e=0;e<n.issues.length;e++)t.push({id:n.issues[e].id,key:n.issues[e].key,summary:n.issues[e].fields.summary,description:n.issues[e].fields.description,comments:n.issues[e].fields.comment.comments,priorityType:n.issues[e].fields.priority.name,priorityUrl:n.issues[e].fields.priority.iconUrl,issueUrl:n.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBacklogBoard",t),console.log("Jira -> fetching backlog board");const s=await async function(e){if($)return await $.board.getIssuesForBoard({boardId:e})}(o);if(s.issues.length>0){let o=[];for(let e=0;e<s.issues.length;e++)o.push({id:s.issues[e].id,key:s.issues[e].key,summary:s.issues[e].fields.summary,description:s.issues[e].fields.description,comments:s.issues[e].fields.comment.comments,priorityType:s.issues[e].fields.priority.name,priorityUrl:s.issues[e].fields.priority.iconUrl,issueUrl:s.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBoard",o),console.log("Jira -> fetching issues board")}}}catch(o){e.emit("errors",o)}}),e.on("createRoom",({userName:o,roomName:n,roomPassword:t,userId:s,boardId:r})=>{const i=L()();let c=new Date;c=A.a.format(c,"YYYY/MM/DD HH:mm:ss"),T.a.hash(t,10).then(e=>(W.set(i,e),async function(e,o,n,t,s,r){const i=new a.Client({connectionString:process.env.DATABASE_URL});try{await i.connect(),await i.query(`INSERT INTO rooms(room_name,room_password,room_id,room_timestamp,user_id,room_board_id) VALUES('${e}', '${o}', '${n}', '${t}', '${s}', '${r}')`),console.log("DB -> save room"),await i.end()}catch(e){console.log(e)}}(n,e,i,c,s||"guest",r||null))).then(()=>{B(s).then(o=>{e.emit("fetchUserRooms",o)})});const u=C(n,i,s,c,r||null,s?null:[{socketId:e.id,userName:o}],null,null);Y.set(i,u),F.push(u),s||(H.set(e.id,i),e.join(i),P.in(i).emit("fetchRoomUsers",u.user),P.in(i).emit("waitingFor",u.game.length),console.log("User -> Created and joined the room! RoomId:",i)),e.emit("createRoom",u),console.log("User -> Created room! RoomId:",i)}),e.on("saveBoardId",({roomId:e,boardId:o})=>{!async function(e,o){const n=new a.Client({connectionString:process.env.DATABASE_URL});try{await n.connect(),await n.query(`UPDATE rooms SET room_board_id = '${o}' WHERE room_id = '${e}'`),console.log("DB -> update room boardId"),n.end()}catch(e){console.log(e)}}(e,o),console.log("User -> Created room! RoomId:",e)}),e.on("joinRoom",({roomId:o,roomPassword:n,userName:t,userId:s,boardId:r})=>{if(Y.has(o)){let r=Y.get(o);const i=W.get(o);T.a.compare(n,i,function(n,i){if(i){let n=new Date;n=A.a.format(n,"YYYY/MM/DD HH:mm:ss"),r.timestamp=n,async function(e,o){const n=new a.Client({connectionString:process.env.DATABASE_URL});try{await n.connect(),await n.query(`UPDATE rooms SET room_timestamp = '${o}' WHERE room_id = '${e}'`),console.log("DB -> update room timestamp"),n.end()}catch(e){console.log(e)}}(o,n),r.user.push({socketId:e.id,userName:t}),H.set(e.id,o),e.join(o);let i=I()(r,function(e){return e.roomId===o});-1!==i&&F[i].user.push({socketId:e.id,userName:t}),console.log("User -> Joinsed room! RoomId:",o),e.emit("joinRoom",r),Y.set(o,r),P.in(o).emit("waitingFor",r.game.length),P.in(o).emit("fetchRoomUsers",r.user),1===r.user.length&&r.userId===s&&P.in(o).emit("changeAdmin",r.user[0].socketId),r.userId===s&&P.in(o).emit("changeAdmin",r.user[0].socketId),console.log(r)}else e.emit("errors",{error:"Invalid Password"})})}else e.emit("errors",{error:"Room not found"})}),e.on("editRoom",({roomId:e,boardId:o,roomPassword:n,roomName:t,userId:s})=>{Y.has(e)}),e.on("deleteRoom",({roomId:o,roomPassword:n,userId:t})=>{if(t){let n=I()(F,function(e){return e.roomId===o});F.splice(n,1),Y.delete(o),j(o),e.emit("deleteRoom"),console.log("User -> Deleted room! RoomId:",o)}else if(n&&W.has(o)){const t=W.get(o);T.a.compare(n,t,function(n,t){if(t){let n=I()(F,function(e){return e.roomId===o});F.splice(n,1),Y.delete(o),j(o),e.emit("deleteRoom"),console.log("User -> Deleted room! RoomId:",o)}else e.emit("errors",{error:"Invalid Password (delete)"})})}}),e.on("sendCard",({roomId:e,socketId:o,userName:n,cardValue:t})=>{if(Y.has(e)){let s=Y.get(e);s.game.push({userName:n,cardValue:t});let r=I()(s.user,function(e){return e.socketId===o});-1!==r&&(s.user[r].userName=`${s.user[r].userName} - ✔`,P.in(e).emit("fetchRoomUsers",s.user)),s.user.length===s.game.length?(P.in(e).emit("sendCard",s.game),P.in(e).emit("waitingFor",s.game.length)):P.in(e).emit("waitingFor",s.game.length),Y.set(e,s)}}),e.on("resetCards",({roomId:e})=>{if(Y.has(e)){let o=Y.get(e);for(let e=0;e<o.user.length;e++){let n=o.user[e].userName.split(" - ");o.user[e].userName=n[0]}o.gameHistory.push(o.game),P.in(e).emit("resetCards",o.gameHistory),P.in(e).emit("fetchRoomUsers",o.user),!async function(e,o){const n=new a.Client({connectionString:process.env.DATABASE_URL});try{await n.connect(),await n.query(`UPDATE rooms SET room_history = '${o}' WHERE room_id = '${e}'`),console.log("DB -> update room history"),n.end()}catch(e){console.log(e)}}(e,JSON.stringify(o.gameHistory)),o.game=[],o.title="",o.description="",P.in(e).emit("waitingFor",o.game.length),Y.set(e,o)}}),e.on("fetchRoomUsers",({roomId:e})=>{if(Y.has(e)){const o=Y.get(e);P.in(e).emit("fetchRoomUsers",o.user),1===o.user.length&&P.in(e).emit("changeAdmin",o.user[0].socketId)}}),e.on("kickUser",({socketId:o,userLeaved:n})=>{if(H.has(o)){let e=H.get(o),t=Y.get(e.toString()),s=I()(t.user,function(e){return e.socketId===o});-1!==s&&(n||P.in(e).emit("kickUser",t.user[s]),t.user.splice(s,1),P.in(e).emit("waitingFor",t.game.length),P.in(e).emit("fetchRoomUsers",t.user),1===t.user.length&&P.in(e).emit("changeAdmin",t.user[0].socketId),Y.set(e,t),console.log("User -> kicked"))}else e.emit("errors",{error:"Cant find user you trying to kick"})}),e.on("changeAdmin",({socketId:o})=>{if(H.has(o)){let e=H.get(o),n=Y.get(e.toString()),t=I()(n.user,function(e){return e.socketId===o});-1!==t&&(P.in(e).emit("changeAdmin",n.user[t].socketId),console.log("User -> admin permissions given"))}else e.emit("errors",{error:"Cant find user you trying to give admin"})}),e.on("broadcastTitle",({roomId:o,title:n})=>{if(Y.has(o)){let t=Y.get(o);t.title!==n&&(t.title=n,e.broadcast.to(o).emit("broadcastTitle",n),Y.set(o,t))}}),e.on("broadcastDescription",({roomId:o,description:n})=>{if(Y.has(o)){let t=Y.get(o);t.description!==n&&(t.description=n,e.broadcast.to(o).emit("broadcastDescription",n),Y.set(o,t))}}),e.on("fetchUserRooms",({userId:o})=>{B(o).then(o=>{e.emit("fetchUserRooms",o)})}),e.on("disconnect",()=>{if(H.has(e.id)){let o=H.get(e.id);if(Y.has(o)){let n=Y.get(o),t=I()(n.user,function(o){return o.socketId===e.id});-1!==t&&(n.user.splice(t,1),P.in(o).emit("waitingFor",n.game.length),1===n.user.length&&P.in(o).emit("changeAdmin",n.user[0].userId),Y.set(o,n),console.log("User -> leave from room on disconnect"))}}console.log("User -> disconnected from server")}),e.on("disconnecting",e=>{console.log("User -> disconnecting reason:",e)}),e.on("reconnecting",e=>{console.log("User -> lost connection in process of reconnection reason:",e)}),e.on("reconnect",()=>{console.log("User -> user reconnected")})}),O.use(m.a.static(R.a.join(__dirname,"../client/build"))),O.get("/login/google",s.a.authenticate("google",{scope:["profile","email"]})),O.get("/login/google/redirect",s.a.authenticate("google"),function(e,o){const n=`{userId: '${e.user.user_id}', userName: '${e.user.user_name}', userEmail: '${e.user.user_email}'}`;o.send(`<script>  \n    window.addEventListener("message", receiveMessage, false);\n    function receiveMessage(event){\n    // Do we trust the sender of this message?\n    if (event.origin !== "http://localhost:3000")\n      return;\n    event.source.postMessage(${n},event.origin);\n    window.close()\n    }\n  <\/script>`)}),O.get("/room/*/:uuid",function(e,o,n){const{uuid:t}=e.params;if(console.log("Room not found!: ",t),Y.has(t))n();else{const e=h.a.readFileSync(R.a.join(__dirname,"../client/build/index.html"),"utf-8").replace("</body>","\n      <script>\n        window.__ROOM_NOT_FOUND__ = true\n      <\/script>\n    </body>");o.status(404).send(e)}}),O.get("*",function(e,o){o.sendFile("index.html",{root:R.a.join(__dirname,"../client/build")})}),M.listen(x,()=>console.log(`Listening on port ${x}`))}]);