!function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=18)}([function(e,o){e.exports=require("pg/lib")},function(e,o){e.exports=require("passport")},function(e,o){e.exports=require("lodash/findIndex")},function(e,o){e.exports=require("dotenv")},function(e,o){e.exports=require("path")},function(e,o){e.exports=require("bcrypt")},function(e,o){e.exports=require("express")},function(e,o){e.exports=require("date-and-time")},function(e,o){e.exports=require("passport-google-oauth20")},function(e,o){e.exports=require("cors")},function(e,o){e.exports=require("http")},function(e,o){e.exports=require("fs")},function(e,o){e.exports=require("socket.io")},function(e,o){e.exports=require("cookie-session")},function(e,o){e.exports=require("uuid/v4")},function(e,o){e.exports=require("jira-connector")},function(e,o){e.exports=require("pg")},function(e,o){e.exports=require("rollbar")},function(e,o,n){"use strict";n.r(o);var t=n(1),r=n.n(t),s=n(8),i=n.n(s),a=n(0);async function c(e){const o=new a.Client({connectionString:process.env.DATABASE_URL});await o.connect();try{const n=await o.query(`SELECT * FROM users WHERE user_id = '${e}'`);return console.log("DB -> user found in DB"),await o.end(),n}catch(e){console.log(e)}}n(3).config(),n(3).config(),r.a.serializeUser((e,o)=>{o(null,e.user_id)}),r.a.deserializeUser((e,o)=>{c(e).then(e=>{o(null,e)})}),r.a.use(new i.a({callbackURL:"/login/google/redirect",clientID:process.env.CLIENT_ID,clientSecret:process.env.CLIENT_SECRET},(e,o,n,t)=>{c(n.id).then(e=>{e.rowCount?t(null,e.rows[0]):async function(e,o,n){const t=new a.Client({connectionString:process.env.DATABASE_URL});await t.connect();try{await t.query(`INSERT INTO users(user_id,user_name,user_email) VALUES('${e}', '${o}', '${n}')`),console.log("DB -> save user in DB"),await t.end()}catch(e){console.log(e)}}(n.id,n.displayName,n.emails[0].value).then(e=>{t(null,{user_id:n.id,user_name:n.displayName,user_email:n.emails[0].value})}).catch(e=>{console.log(e)})}).catch(e=>{console.log(e)})}));var u=n(9),l=n.n(u),m=n(6),d=n.n(m),g=n(10),f=n.n(g),p=n(11),h=n.n(p),y=n(12),_=n.n(y),w=n(2),E=n.n(w),I=n(4),R=n.n(I),S=n(7),A=n.n(S),T=n(5),U=n.n(T),v=n(13),b=n.n(v);n(3).config();const{Client:D}=n(16);n(17);async function k(e){const o=new a.Client({connectionString:process.env.DATABASE_URL});try{await o.connect(),await o.query(`DELETE FROM rooms WHERE room_id = '${e}'`),console.log("DB -> delete room"),await o.end()}catch(e){console.log(e)}}n(3).config();var B=n(14),L=n.n(B);function q(e,o,n,t,r,s,i,a){return{roomName:e||"",roomId:o||"",userId:n,timestamp:t||"",boardId:r||"",user:s||[],game:i||[],gameHistory:a||[]}}var C=n(15),N=n.n(C);let j;n(3).config();const x=process.env.PORT||3001,O=d()();O.use(l()()),O.use(b()({maxAge:6048e5,keys:[process.env.COOKIE_KEY]})),O.use(r.a.initialize()),O.use(r.a.session());const M=f.a.createServer(O),$=_()(M,{cookie:!1});let F=[],P=new Map,H=new Map,Y=new Map;!async function(){try{await async function(){try{const e=await new D({connectionString:process.env.DATABASE_URL});await e.connect(),await e.query('CREATE TABLE IF NOT EXISTS rooms(id SERIAL PRIMARY KEY, room_name "char" not null, room_id "char" not null, room_password "char" not null, room_tags json[], room_history json, room_board_id json, user_id "char" not null, room_timestamp TIMESTAMP not null)'),await e.query('CREATE TABLE IF NOT EXISTS users(id SERIAL PRIMARY KEY, user_id "char" not null, user_name "char" not null, user_email "char" not null, jira_subdomain "char"[] not null, jira_email "char" not null, user_name "char" not null) '),await e.query("INSERT INTO users(user_id,user_name,user_email) \n    SELECT 'guest', 'guest', 'guest'\n    WHERE NOT EXISTS (\n        SELECT 1 FROM users WHERE user_id='guest'\n    )"),e.end()}catch(e){console.log(e)}}(),console.log("DB -> init DB");const{rows:e}=await async function(){const e=new a.Client({connectionString:process.env.DATABASE_URL});await e.connect();try{const o=await e.query("SELECT * FROM rooms");return e.end(),o}catch(e){console.log(e)}}();e.map(({room_name:e,room_id:o,user_id:n,room_password:t,room_timestamp:r,room_history:s,room_board_id:i})=>{const a=q(e,o,n,r,i,!1,!1,s);Y.set(o,t),H.set(o,a),console.log(P,H)}),console.log("DB -> fetching rooms from DB")}catch(e){console.log(e)}}(),$.on("connection",e=>{console.log("User -> connected to server id:",e.id),e.on("jiraLogin",o=>{(async function({jiraLogin:e,jiraPassword:o,jiraSubdomain:n}){if(j=new N.a({host:`${n}.atlassian.net`,basic_auth:{username:e,password:o}}))return await j.board.getAllBoards({startAt:0})})(o).then(o=>{e.emit("jiraLogin",o)}).catch(o=>{e.emit("errors",{error:o})})}),e.on("jiraGetBoard",async o=>{try{const n=await async function(e){if(j)return await j.board.getIssuesForBacklog({boardId:e})}(o);if(n.issues.length>0){let t=[];for(let e=0;e<board.issues.length;e++)t.push({id:n.issues[e].id,key:n.issues[e].key,summary:n.issues[e].fields.summary,description:n.issues[e].fields.description,comments:n.issues[e].fields.comment.comments,priorityType:n.issues[e].fields.priority.name,priorityUrl:n.issues[e].fields.priority.iconUrl,issueUrl:n.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBacklogBoard",t),console.log("Jira -> fetching backlog board");const r=await async function(e){if(j)return await j.board.getIssuesForBoard({boardId:e})}(o);if(r.issues.length>0){let o=[];for(let e=0;e<r.issues.length;e++)o.push({id:r.issues[e].id,key:r.issues[e].key,summary:r.issues[e].fields.summary,description:r.issues[e].fields.description,comments:r.issues[e].fields.comment.comments,priorityType:r.issues[e].fields.priority.name,priorityUrl:r.issues[e].fields.priority.iconUrl,issueUrl:r.issues[e].fields.issuetype.iconUrl});e.emit("jiraGetBoard",o),console.log("Jira -> fetching issues board")}}}catch(o){e.emit("errors",o)}}),e.on("createRoom",({userName:o,roomName:n,roomPassword:t,userId:r})=>{const s=L()();let i=new Date;i=A.a.format(i,"YYYY/MM/DD HH:mm:ss"),U.a.hash(t,10,(o,t)=>{Y.set(s,t),r&&async function(e,o,n,t,r){const s=new a.Client({connectionString:process.env.DATABASE_URL});try{await s.connect(),await s.query(`INSERT INTO rooms(room_name,room_password,room_id,room_timestamp,user_id) VALUES('${e}', '${o}', '${n}', '${t}', '${r}')`),console.log("DB -> save room"),await s.end()}catch(e){console.log(e)}}(n,t,s,i,r),o&&e.emit("errors",{error:o})});const c=q(n,s,r,i,null,[{socketId:e.id,userName:o}],null,null);H.set(s,c),P.set(e.id,s),F.push(c),e.join(s),e.emit("createRoom",c),$.in(s).emit("waitingFor",c.game.length),$.in(s).emit("fetchRoomUsers",c.user),console.log("User -> Created room! RoomId:",s)}),e.on("saveBoardId",({roomId:e,boardId:o})=>{!async function(e,o){const n=new a.Client({connectionString:process.env.DATABASE_URL});try{await n.connect(),await n.query(`UPDATE rooms SET room_board_id = '${o}' WHERE room_id = '${e}'`),console.log("DB -> update room boardId"),n.end()}catch(e){console.log(e)}}(e,o),console.log("User -> Created room! RoomId:",e)}),e.on("joinRoom",({roomId:o,roomPassword:n,userName:t})=>{if(H.has(o)){let r=H.get(o);console.log(r);const s=Y.get(o);U.a.compare(n,s,function(n,s){if(s){let n=new Date;n=A.a.format(n,"YYYY/MM/DD HH:mm:ss"),r.timestamp=n,async function(e,o){const n=new a.Client({connectionString:process.env.DATABASE_URL});try{await n.connect(),await n.query(`UPDATE rooms SET room_timestamp = '${o}' WHERE room_id = '${e}'`),console.log("DB -> update room timestamp"),n.end()}catch(e){console.log(e)}}(o,n),r.user.push({socketId:e.id,userName:t}),P.set(e.id,o),e.join(o);let s=E()(r,function(e){return e.roomId===o});-1!==s&&F[s].user.push({socketId:e.id,userName:t}),console.log("User -> Joinsed room! RoomId:",o),e.emit("joinRoom",r),H.set(o,r),$.in(o).emit("waitingFor",r.game.length),$.in(o).emit("fetchRoomUsers",r.user),1===r.user.length&&$.in(o).emit("changeAdmin",r.user[0].socketId),console.log(r)}else e.emit("errors",{error:"Invalid Password"})})}else e.emit("errors",{error:"Room not found"})}),e.on("deleteRoom",({roomId:o,roomPassword:n,userId:t})=>{if(t){let n=E()(F,function(e){return e.roomId===o});F.splice(n,1),H.delete(o),k(o),e.emit("deleteRoom"),console.log("User -> Deleted room! RoomId:",o)}else if(n&&Y.has(o)){const t=Y.get(o);U.a.compare(n,t,function(n,t){if(t){let n=E()(F,function(e){return e.roomId===o});F.splice(n,1),H.delete(o),k(o),e.emit("deleteRoom"),console.log("User -> Deleted room! RoomId:",o)}else e.emit("errors",{error:"Invalid Password (delete)"})})}}),e.on("sendCard",({roomId:e,socketId:o,userName:n,cardValue:t})=>{if(H.has(e)){let r=H.get(e);r.game.push({userName:n,cardValue:t});let s=E()(r.user,function(e){return e.socketId===o});-1!==s&&(r.user[s].userName=`${r.user[s].userName} - âœ”`,$.in(e).emit("fetchRoomUsers",r.user)),r.user.length===r.game.length?($.in(e).emit("sendCard",r.game),$.in(e).emit("waitingFor",r.game.length)):$.in(e).emit("waitingFor",r.game.length),H.set(e,r)}}),e.on("resetCards",({roomId:e})=>{if(H.has(e)){let o=H.get(e);for(let e=0;e<o.user.length;e++){let n=o.user[e].userName.split(" - ");o.user[e].userName=n[0]}o.gameHistory.push(o.game),$.in(e).emit("resetCards",o.gameHistory),$.in(e).emit("fetchRoomUsers",o.user),!async function(e,o){const n=new a.Client({connectionString:process.env.DATABASE_URL});try{await n.connect(),await n.query(`UPDATE rooms SET room_history = '${o}' WHERE room_id = '${e}'`),console.log("DB -> update room history"),n.end()}catch(e){console.log(e)}}(e,JSON.stringify(o.gameHistory)),o.game=[],o.title="",o.description="",$.in(e).emit("waitingFor",o.game.length),H.set(e,o)}}),e.on("fetchRoomUsers",({roomId:e})=>{if(H.has(e)){const o=H.get(e);$.in(e).emit("fetchRoomUsers",o.user),1===o.user.length&&$.in(e).emit("changeAdmin",o.user[0].socketId)}}),e.on("kickUser",({socketId:o,userLeaved:n})=>{if(P.has(o)){let e=P.get(o),t=H.get(e.toString()),r=E()(t.user,function(e){return e.socketId===o});-1!==r&&(n||$.in(e).emit("kickUser",t.user[r]),t.user.splice(r,1),$.in(e).emit("waitingFor",t.game.length),$.in(e).emit("fetchRoomUsers",t.user),1===t.user.length&&$.in(e).emit("changeAdmin",t.user[0].socketId),H.set(e,t),console.log("User -> kicked"))}else e.emit("errors",{error:"Cant find user you trying to kick"})}),e.on("changeAdmin",({socketId:o})=>{if(P.has(o)){let e=P.get(o),n=H.get(e.toString()),t=E()(n.user,function(e){return e.socketId===o});-1!==t&&($.in(e).emit("changeAdmin",n.user[t].socketId),console.log("User -> admin permissions given"))}else e.emit("errors",{error:"Cant find user you trying to give admin"})}),e.on("broadcastTitle",({roomId:o,title:n})=>{if(H.has(o)){let t=H.get(o);t.title!==n&&(t.title=n,e.broadcast.to(o).emit("broadcastTitle",n),H.set(o,t))}}),e.on("broadcastDescription",({roomId:o,description:n})=>{if(H.has(o)){let t=H.get(o);t.description!==n&&(t.description=n,e.broadcast.to(o).emit("broadcastDescription",n),H.set(o,t))}}),e.on("fetchUserRooms",({userId:o})=>{(async function(e){const o=new a.Client({connectionString:process.env.DATABASE_URL});await o.connect();try{const n=await o.query(`SELECT * FROM rooms WHERE user_id = '${e}'`);return o.end(),n}catch(e){console.log(e)}})(o).then(o=>{e.emit("fetchUserRooms",o)})}),e.on("disconnect",()=>{if(P.has(e.id)){let o=P.get(e.id);if(H.has(o)){let n=H.get(o.toString()),t=E()(n.user,function(o){return o.userId===e.id});-1!==t&&(n.user.splice(t,1),$.in(o.toString()).emit("waitingFor",n.game.length),1===n.user.length&&$.in(o.toString()).emit("changeAdmin",n.user[0].userId),H.set(o.toString(),n),console.log("User -> disconnected from room"))}}console.log("User -> disconnected from server")}),e.on("disconnecting",e=>{console.log("User -> disconnecting reason:",e)}),e.on("reconnecting",e=>{console.log("User -> lost connection in process of reconnection reason:",e)}),e.on("reconnect",()=>{console.log("User -> user reconnected")})}),O.use(d.a.static(R.a.join(__dirname,"../client/build"))),O.get("/login/google",r.a.authenticate("google",{scope:["profile","email"]})),O.get("/login/google/redirect",r.a.authenticate("google"),function(e,o){const n=`{userId: '${e.user.user_id}', userName: '${e.user.user_name}', userEmail: '${e.user.user_email}'}`;o.send(`<script>  \n    window.addEventListener("message", receiveMessage, false);\n    function receiveMessage(event){\n    // Do we trust the sender of this message?\n    if (event.origin !== "http://localhost:3000")\n      return;\n    event.source.postMessage(${n},event.origin);\n    window.close()\n    }\n  <\/script>`)}),O.get("/room/*/:uuid",function(e,o,n){const{uuid:t}=e.params;if(console.log("Room not found!: ",t),H.has(t))n();else{const e=h.a.readFileSync(R.a.join(__dirname,"../client/build/index.html"),"utf-8").replace("</body>","\n      <script>\n        window.__ROOM_NOT_FOUND__ = true\n      <\/script>\n    </body>");o.status(404).send(e)}}),O.get("*",function(e,o){o.sendFile("index.html",{root:R.a.join(__dirname,"../client/build")})}),M.listen(x,()=>console.log(`Listening on port ${x}`))}]);